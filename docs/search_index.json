[["r-methods-and-how-tos.html", "Chapter 4 R Methods and how to`s: 4.1 How to add Lorem ipsum paragraphs in r markdow. 4.2 How to insert colummns in r markdown. 4.3 How to Find the indices of lines in Markdown that are prose (not balanced). 4.4 How to DISCHARGE git commits to avoid conflicts (Special circumstances).", " Chapter 4 R Methods and how to`s: 4.1 How to add Lorem ipsum paragraphs in r markdow. lorem::ipsum() link here to see all examples. * Quickly generate lorem ipsum placeholder text with lorem::ipsum(). * Easy to integrate in RMarkdown documents. * Includes an RStudio addin to insert lorem ipsum into the current document. First install # install.package(&quot;devtools&quot;) devtools::install_github(&quot;gadenbuie/lorem&quot;) # If devtools can not be installed. # Install in terminal: # brew install libgit2 #Then in R # install.packages(&quot;devtools&quot;) # install.packages(&quot;usethis&quot;) Usage: The addin allows you to specify the number of desired paragraphs and sentences. R Markdown Call lorem::ipsum() in an inline R chunk in R Markdown. `r lorem::ipsum(paragraphs = 2)` Place the scrip with “``” (inline code) to call the function. ex. `r lorem::ipsum(paragraphs = 1)` You can control the number of paragraphs and sentences per paragraph. `r lorem::ipsum(paragraphs = 3, sentences = c(1, 2, 3))` You can also adjust the avg_words_per_sentence to create long or short paragraphs. `r lorem::ipsum(2, avg_words_per_sentence = 3)` `r lorem::ipsum(1, avg_words_per_sentence = 20)` Everywhere Else Generate lorem ipsum anywhere else using lorem::ipsum() or lorem::ipsum_words(). ipsum_items &lt;- replicate(5, lorem::ipsum_words(5)) cat(paste(&quot;-&quot;, ipsum_items), sep = &quot;\\n&quot;) 4.2 How to insert colummns in r markdown. Description of the methods in this Link. Put the following in the css file or directly in rmarkdown. It is better to add directly to the style.css file for it to work properly. &lt;style&gt; .col2 { columns: 2 200px; /* number of columns and width in pixels*/ -webkit-columns: 2 200px; /* chrome, safari */ -moz-columns: 2 200px; /* firefox */ } .col3 { columns: 3 100px; -webkit-columns: 3 100px; -moz-columns: 3 100px; } &lt;/style&gt; .col2 { columns: 2 200px; /* number of columns and width in pixels*/ -webkit-columns: 2 200px; /* chrome, safari */ -moz-columns: 2 200px; /* firefox */ } .col3 { columns: 3 100px; -webkit-columns: 3 100px; -moz-columns: 3 100px; } 4.2.1 Columns + loremipsum example Code: &lt;div class=&quot;col3&quot;&gt; **1. paragraphs = 1** `r lorem::ipsum()` **2. paragraphs = 3, sentences = c(1, 2, 3)** `r lorem::ipsum(paragraphs = 3, sentences = c(1, 2, 3))` **3. paragraphs = 2, avg_words_per_sentence = 3** `r lorem::ipsum(2, avg_words_per_sentence = 3)` **4.** four. **5.** five. **6.** six. **7.** seven. **8.** eight. **9.** nine. &lt;/div&gt; Result 1. paragraphs = 1 Consectetur mi fusce platea egestas venenatis montes vivamus. Dictum euismod cubilia nascetur risus risus purus! Mattis arcu nam habitant vehicula nibh commodo viverra dui ridiculus! Suscipit pharetra dictumst nostra justo vestibulum fusce metus. Cras lobortis sed tempor tristique integer mattis euismod leo aliquet himenaeos ridiculus vehicula accumsan feugiat sollicitudin semper mollis nisi dictum porta. 2. paragraphs = 3, sentences = c(1, 2, 3) Sit iaculis lacinia elementum class suscipit integer ornare rutrum ut potenti? Consectetur habitant nibh phasellus euismod proin interdum mi taciti semper dapibus quam! Hac neque tellus cum! Lorem senectus hac penatibus integer risus ullamcorper phasellus. Ligula penatibus aliquet tellus bibendum nibh porttitor phasellus facilisi at cursus. Varius eros ultrices cum feugiat quis elementum mus lacus morbi. 3. paragraphs = 2, avg_words_per_sentence = 3 Elit id proin sollicitudin. Semper integer sodales nec. Arcu luctus eros sollicitudin. Hac sem vitae in. Est porta quam tincidunt. Sociosqu congue feugiat per. Na per. Elit sed fames ad? Dictum aliquam convallis mi. Eu ornare quis pulvinar gravida. Vitae bibendum vestibulum orci suscipit. Na suscipit. 4. four. 5. five. 6. six. 7. seven. 8. eight. 9. nine. 4.2.2 This section will have two columns Code: (Erase the “()” in the {} section, it should be {r} only) &lt;div class=&quot;col2&quot;&gt; ```{(r)} head(mtcars) tail(mtcars)``` &lt;/div&gt; Result: head(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 tail(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.7 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.9 1 1 5 2 ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.5 0 1 5 4 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.5 0 1 5 6 ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.6 0 1 5 8 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.6 1 1 4 2 From here the columns are released. 4.3 How to Find the indices of lines in Markdown that are prose (not balanced). Link1, Link2 Prose_index Find the indices of lines in Markdown that are prose (not code blocks). Description Filters out the indices of lines between code block fences such as ``` (could be three or four or more backticks). Usage library(xfun) ## ??xfun prose_index(&quot;```&quot;, warn = TRUE) prose_index(c(&quot;a&quot;, &quot;```&quot;, &quot;b&quot;, &quot;```&quot;, &quot;c&quot;)) prose_index(c(&quot;a&quot;, &quot;````&quot;, &quot;```r&quot;, &quot;1+1&quot;, &quot;```&quot;, &quot;````&quot;, &quot;c&quot;)) Value: An integer vector of indices of lines that are prose in Markdown. Note: If the code fences are not balanced (e.g., a starting fence without an ending fence), this function will treat all lines as prose. Still DO NOT UNDERSTAND HOW IT WORKS AND WHAT THE OUTCOME MEANS. 4.4 How to DISCHARGE git commits to avoid conflicts (Special circumstances). Apparently it is not possible to discard changes made in &gt;environment &gt;Git tab. (At least I did not found a way yet). The only way Discard is by: going to the GitHub desktop app, Select the correct repository from where to remove the changes. Select all the changed files (command + A) Right click over the selected changes. Select discard selected changes and click on OK. "]]
